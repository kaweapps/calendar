{"version":3,"sources":["components/CalendarButton.js","components/Header.js","container/Calendar.js","serviceWorker.js","index.js"],"names":["CalendarButton","number","day","currentDay","handleClose","month","year","date","Date","btBackground","getMonth","getFullYear","className","onClick","substring","Header","this","props","goBack","goForward","Component","Calendar","getNumOfDays","days","getDate","arrayDays","i","push","state","daysOfWeek","monthNames","bind","d","setState","buttons","map","s","dayOfWeek","getDay","key","previousMonth","nextMonth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82fb09e7.chunk.js","sourcesContent":["import React from 'react';\nimport 'tachyons'\n\nconst CalendarButton = ({number, day, currentDay, handleClose, month, year}) => {\n\tconst date = new Date();\n\tconst isToday = (currentDay === number && month === date.getMonth() && year === date.getFullYear())\n\tlet btBackground = isToday ? 'bg-green' : 'tc bg-light-green';\n\treturn ( \n\t\t\t<div className={`tc ${btBackground} dib br3 pa3 grow bw2 shadow-5 courier fl w-10 dim`} onClick={handleClose}>\n\t\t\t\t <p>{ day.substring(0, 3) }</p>\n\t\t\t\t <p>\n\t\t\t\t\t{\n\t\t\t\t\t\tnumber\n\t\t\t\t\t}\n\t\t\t\t </p>\t\n\t\t\t</div>\n\t\t);\n}\n\nexport default CalendarButton;","import React, {Component} from 'react';\n\n\nclass Header extends Component {\n\n\trender() {\n\t\tconst {month, year, goBack, goForward} = this.props\n\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className='tc courier'> <span className=\"pointer\" onClick={goBack}> &#8701; </span> { month + \" \" +year }  <span className=\"pointer\" onClick={goForward}>&#8702;</span> </h1>\n\t\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport CalendarButton from '../components/CalendarButton';\nimport Header from '../components/Header';\nimport 'tachyons';\n\nclass Calendar extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdays : [],\n\t\t\tmonth : '',\n\t\t\tyear : '',\n\t\t\tcurrentDay : '',\n\t\t\tdaysOfWeek : [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n\t\t\tmonthNames : [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n\t\t\tdate : new Date()\n\t\t}\n\t\tthis.goBack = this.goBack.bind(this);\n\t\tthis.goForward = this.goForward.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst d = this.state.date;\n\t\tconst date = new Date(d.getFullYear(), d.getMonth() + 1, 0);\n\t\tconst month = this.state.monthNames[d.getMonth()];\n\t\tlet arrayDays = this.getNumOfDays(new Date(date.getFullYear(), date.getMonth() + 1, 0));\n\t\tthis.setState({days : arrayDays, month : month, year : d.getFullYear(), currentDay : d.getDate()});\n\t}\n\n\trender() {\n\t    let state = this.state.days;\n\t    const buttons = state.map((s, i) => {\n\t    \tconst number = i + 1;\n\t    \tconst d = this.state.date;\n\t    \tlet date = new Date(d.getFullYear(), d.getMonth(), number);\n\t    \tlet dayOfWeek = this.state.daysOfWeek[date.getDay()];\n\t    \treturn <CalendarButton key={i} number={number} day={dayOfWeek} currentDay={this.state.currentDay} handleClose={this.handleClose} month={d.getMonth()} year={this.state.year}/>\n\t    });\n\t\treturn (\n\t\t\t\t<div className='ma3'>\n\t\t\t\t\t<Header month={this.state.month} year={this.state.year} goBack={this.goBack} goForward={this.goForward}/>\n\t\t\t\t\t {\n\t\t\t\t\t \tbuttons\n\t\t\t\t\t }\n\t\t\t\t\n\t\t\t\t</div>\n\t\t\t)\n\t}\n\n\tgoBack() {\n\t\tlet date = this.state.date;\n\t\tconst previousMonth = new Date(date.getFullYear(), date.getMonth() - 1);\n\t\tconst month = this.state.monthNames[previousMonth.getMonth()];\n\t\tlet arrayDays = this.getNumOfDays(new Date(previousMonth.getFullYear(), previousMonth.getMonth() + 1, 0));\n\t\tthis.setState({date : previousMonth, days : arrayDays, month : month, year : previousMonth.getFullYear()});\n\t}\n\n\tgoForward(){\n\t\tlet date = this.state.date;\n\t\tconst nextMonth = new Date(date.getFullYear(), date.getMonth() + 1);\n\t\tconst month = this.state.monthNames[nextMonth.getMonth()];\n\t\tlet arrayDays = this.getNumOfDays(new Date(nextMonth.getFullYear(), nextMonth.getMonth() + 1, 0));\n\t\tthis.setState({date : nextMonth, days : arrayDays, month : month, year : nextMonth.getFullYear()});\n\t}\n\n\tgetNumOfDays = (month) => {\n\t\tconst days = new Date(month.getFullYear(), month.getMonth() + 1, 0).getDate();\n\t\tlet arrayDays = [];\n\t\tfor(let i = 0; i < days; i++) {\n\t\t\tarrayDays.push(i);\n\t\t}\n\t\treturn arrayDays;\n\t}\n\n    //todo\n\thandleClose = () => {}\n}\n\nexport default Calendar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calendar from './container/Calendar';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Calendar />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}